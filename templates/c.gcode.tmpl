enum {
  LAST_SIGNAL
};

enum {
  PROP_0,
  NUM_PROPERTIES
};

static GParamSpec *widget_props[NUM_PROPERTIES] = { NULL, };
static guint signals[LAST_SIGNAL] = { 0 };

#if 1
struct _{{Cpkg}}{{Cobj}}
{
  {{Ppkg}}{{Pobj}}      {{pobj}};
};

G_DEFINE_TYPE ({{Cpkg}}{{Cobj}}, {{cpkg}}_{{cobj}}, {{PPKG}}_TYPE_{{POBJ}});
#else
typedef struct {
  {{Ppkg}}{{Pobj}}      {{pobj}};
} {{Cpkg}}{{Cobj}}Private;

G_DEFINE_TYPE_WITH_PRIVATE ({{Cpkg}}{{Cobj}}, {{cpkg}}_{{cobj}}, {{PPKG}}_TYPE_{{POBJ}});
#endif //#if 0/1

static void {{cpkg}}_{{cobj}}_set_property (GObject *object, guint prop_id, const GValue *value, GParamSpec *pspec)
{
  {{Cpkg}}{{Cobj}} *{{cobj}};

  {{cobj}} = {{CPKG}}_{{COBJ}} (object);

  switch (prop_id)
  {
    default:
      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
      break;
  }
}

static void {{cpkg}}_{{cobj}}_get_property (GObject *object, guint prop_id, GValue *value, GParamSpec *pspec)
{
  {{Cpkg}}{{Cobj}} *{{cobj}};

  {{cobj}} = {{CPKG}}_{{COBJ}} (object);

  switch (prop_id)
  {

    default:
      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
      break;
  }
}

static void {{cpkg}}_{{cobj}}_class_init ({{Cpkg}}{{Cobj}}Class *klass)
{
  GObjectClass *object_class = G_OBJECT_CLASS (klass);
  GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);

  object_class->set_property = {{cpkg}}_{{cobj}}_set_property;
  object_class->get_property = {{cpkg}}_{{cobj}}_get_property;
}

static void {{cpkg}}_{{cobj}}_init ({{Cpkg}}{{Cobj}} *{{cobj}})
{
#if 0
  {{Cpkg}}{{Cobj}}Private *priv;

  priv = {{cpkg}}_{{cobj}}_get_instance_private ({{cobj}});
#endif

}

{{Cpkg}}{{Cobj}}* {{cpkg}}_{{cobj}}_new (void)
{
  return g_object_new ({{CPKG}}_TYPE_{{COBJ}}, NULL);
}
